# -*- coding: utf-8 -*-
"""Obesity_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Fxf--X8c9rsN48bR9LMieq0WJSIjlj7
"""


!pip install pyngrok

import streamlit as st
import joblib
import numpy as np

# Load model and scaler
model = joblib.load("Lr_model.pkl")
scaler = joblib.load("Lr_scaler.pkl")

"""Create Obesity App"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile hero_section.py
# # hero_section.py
# import streamlit as st
# 
# def show_hero(username=None):
#     if username:
#         title = f"üëã Welcome, <b>{username}</b>"
#         subtitle = "Noom is an AI-powered lifestyle and health assessment tool that helps predict and monitor obesity categories."
#     else:
#         title = "üè• Obesity Prediction Dashboard"
#         subtitle = "AI-powered lifestyle and health assessment tool"
# 
#     st.markdown(
#         f"""
#         <style>
#         .hero {{
#             background: linear-gradient(135deg, #1f2937, #111827);
#             background-size: cover;
#             background-position: center;
#             height: 30vh;
#             width: 100%;
#             display: flex;
#             flex-direction: column;
#             align-items: center;
#             justify-content: center;
#             color: white;
#             border-radius: 12px;
#             margin-bottom: 30px;
#         }}
#         .hero h1 {{
#             font-size: 42px;
#             margin-bottom: 15px;
#             font-weight: 700;
#         }}
#         .hero p {{
#             font-size: 18px;
#             opacity: 0.9;
#         }}
#         </style>
# 
#         <div class="hero">
#             <h1>{title}</h1>
#             <p>{subtitle}</p>
#         </div>
#         """,
#         unsafe_allow_html=True
#     )
#

# %%writefile predict.py
# import streamlit as st
# import plotly.graph_objects as go

# def run_prediction(inputs, model, scaler, le, username="User"):
#     """Run prediction and display results + BMI gauge + personalized analysis"""
#     # Encode features
#     X = [
#         0 if inputs['Gender'] == "Female" else 1,
#         inputs['Age'],
#         inputs['Height'],
#         inputs['Weight'],
#         1 if inputs['family_history_with_overweight'] == "yes" else 0,
#         1 if inputs['FAVC'] == "yes" else 0,
#         inputs['FCVC'],
#         inputs['NCP'],
#         0 if inputs['CAEC'] == "no" else (1 if inputs['CAEC'] == "Sometimes" else 2),
#         0 if inputs['SMOKE'] == "no" else 1,
#         inputs['CH2O'],
#         0 if inputs['SCC'] == "no" else 1,
#         inputs['FAF'],
#         inputs['TUE'],
#         0 if inputs['CALC'] == "no" else (1 if inputs['CALC'] == "Sometimes" else 2),
#         0 if inputs['MTRANS'] == "Automobile" else (
#             1 if inputs['MTRANS'] == "Motorbike" else (
#             2 if inputs['MTRANS'] == "Bike" else (
#             3 if inputs['MTRANS'] == "Public_Transportation" else 4)))
#     ]

#     # Scale only Age, Height, and Weight
#     X_scaled = scaler.transform([X])
#     prediction = model.predict(X_scaled)
#     pred_class = le.inverse_transform(prediction)

#     # Show prediction
#     st.success(f"‚úÖ Predicted obesity category: **{pred_class[0]}**")

#     # --- BMI calculation ---
#     bmi = inputs['Weight'] / (inputs['Height'] ** 2)
#     st.metric(label="Your BMI", value=f"{bmi:.2f}")

#     if bmi < 18.5:
#         bmi_category = "Underweight"
#     elif 18.5 <= bmi < 24.9:
#         bmi_category = "Normal weight"
#     elif 25 <= bmi < 29.9:
#         bmi_category = "Overweight"
#     else:
#         bmi_category = "Obese"

#     st.write(f"**BMI Category:** {bmi_category}")

#     # --- BMI visualization ---
#     max_bmi = max(40, round(bmi + 5))  # extend above current BMI
#     fig = go.Figure(go.Indicator(
#         mode="gauge+number",
#         value=bmi,
#         title={'text': "BMI Gauge"},
#         gauge={
#             'axis': {'range': [10, max_bmi]},
#             'steps': [
#                 {'range': [10, 18.5], 'color': "lightblue"},
#                 {'range': [18.5, 24.9], 'color': "lightgreen"},
#                 {'range': [25, 29.9], 'color': "orange"},
#                 {'range': [30, max_bmi], 'color': "red"}],
#             'threshold': {
#                 'line': {'color': "black", 'width': 4},
#                 'thickness': 0.75,
#                 'value': bmi
#             }
#         }
#     ))
#     st.plotly_chart(fig, use_container_width=True)

#     # --- Personalized Analysis ---
#     st.markdown(f"### üë§ {username}, why are you classified as **{pred_class[0]}**?")

#     # Personal Info Analysis
#     st.markdown("#### üß¨ Your Personal Information")
#     if inputs['family_history_with_overweight'] == "yes":
#         st.write("- You have a family history of overweight, which might increase your risk of obesity.")
#     if inputs['Age'] > 40:
#         st.write("- You are over 40 years old, and slower metabolism at this age can make weight control harder.")
#     if bmi >= 25:
#         st.write(f"- Your BMI of **{bmi:.2f}** shows excess weight, which contributes to obesity risk.")
#     if inputs['Gender'] == "Male":
#         st.write("- As a male, you may store more visceral fat, which can raise health risks.")

#     # Lifestyle Info Analysis
#     st.markdown("#### üçΩÔ∏è Your Lifestyle Information")
#     if inputs['FAVC'] == "yes":
#         st.write("- You frequently consume high-calorie foods, which increases your chance of weight gain.")
#     if inputs['FCVC'] <= 1:
#         st.write("- You eat vegetables rarely or sometimes, which limits nutrient balance and can increase obesity risk.")
#     elif inputs['FCVC'] >= 2:
#         st.write("- You eat vegetables frequently, which helps lower obesity risk.")
#     if inputs['CAEC'] != "no":
#         st.write("- You often eat between meals, which raises your daily calorie intake.")
#     if inputs['SMOKE'] == "yes":
#         st.write("- You smoke, which affects metabolism and may influence your weight.")
#     if inputs['CH2O'] < 1.5:
#         st.write("- You drink less water than recommended, which might slow down your metabolism.")
#     if inputs['FAF'] < 2:
#         st.write("- You do little physical activity, which strongly contributes to weight gain.")
#     if inputs['TUE'] > 6:
#         st.write("- You spend many hours using electronic devices, showing a sedentary lifestyle.")
#     if inputs['CALC'] != "no":
#         st.write("- You drink alcohol, which adds extra calories to your diet.")
#     if inputs['MTRANS'] in ["Automobile", "Motorbike"]:
#         st.write("- You mainly use motorized transport, which reduces your daily physical activity.")

#     st.info("‚úÖ These factors together explain why the model classified you into this obesity category.")

# %%writefile predict.py
# import streamlit as st
# import plotly.graph_objects as go

# def run_prediction(inputs, model, scaler, le, username="User"):
#     """Run prediction and display results + BMI gauge + personalized analysis"""
#     # Encode features
#     X = [
#         0 if inputs['Gender'] == "Female" else 1,
#         inputs['Age'],
#         inputs['Height'],
#         inputs['Weight'],
#         1 if inputs['family_history_with_overweight'] == "yes" else 0,
#         1 if inputs['FAVC'] == "yes" else 0,
#         inputs['FCVC'],
#         inputs['NCP'],
#         0 if inputs['CAEC'] == "no" else (1 if inputs['CAEC'] == "Sometimes" else 2),
#         0 if inputs['SMOKE'] == "no" else 1,
#         inputs['CH2O'],
#         0 if inputs['SCC'] == "no" else 1,
#         inputs['FAF'],
#         inputs['TUE'],
#         0 if inputs['CALC'] == "no" else (1 if inputs['CALC'] == "Sometimes" else 2),
#         0 if inputs['MTRANS'] == "Automobile" else (
#             1 if inputs['MTRANS'] == "Motorbike" else (
#             2 if inputs['MTRANS'] == "Bike" else (
#             3 if inputs['MTRANS'] == "Public_Transportation" else 4)))
#     ]

#     # Scale + predict
#     X[1:4] = scaler.transform([[X[1], X[2], X[3]]])[0]

#     # Predict using trained model
#     prediction = model.predict([X])
#     pred_class = le.inverse_transform(prediction)

#     # Show prediction
#     st.success(f"‚úÖ Predicted obesity category: **{pred_class[0]}**")

#     # --- BMI calculation ---
#     bmi = inputs['Weight'] / (inputs['Height'] ** 2)
#     st.metric(label="Your BMI", value=f"{bmi:.2f}")

#     if bmi < 18.5:
#         bmi_category = "Underweight"
#     elif 18.5 <= bmi < 24.9:
#         bmi_category = "Normal weight"
#     elif 25 <= bmi < 29.9:
#         bmi_category = "Overweight"
#     else:
#         bmi_category = "Obese"

#     st.write(f"**BMI Category:** {bmi_category}")

#     # --- BMI visualization ---
#     max_bmi = max(40, round(bmi + 5))  # extend above current BMI
#     fig = go.Figure(go.Indicator(
#         mode="gauge+number",
#         value=bmi,
#         title={'text': "BMI Gauge"},
#         gauge={
#             'axis': {'range': [10, max_bmi]},
#             'steps': [
#                 {'range': [10, 18.5], 'color': "lightblue"},
#                 {'range': [18.5, 24.9], 'color': "lightgreen"},
#                 {'range': [25, 29.9], 'color': "orange"},
#                 {'range': [30, max_bmi], 'color': "red"}],
#             'threshold': {
#                 'line': {'color': "black", 'width': 4},
#                 'thickness': 0.75,
#                 'value': bmi
#             }
#         }
#     ))
#     st.plotly_chart(fig, use_container_width=True)

#     # --- Personalized Analysis ---
#     st.markdown(f"### üë§ {username}, why are you classified as **{pred_class[0]}**?")

#     # Personal Info Analysis
#     st.markdown("#### üß¨ Your Personal Information")
#     if inputs['family_history_with_overweight'] == "yes":
#         st.write("- You have a family history of overweight, which might increase your risk of obesity.")
#     if inputs['Age'] > 40:
#         st.write("- You are over 40 years old, and slower metabolism at this age can make weight control harder.")
#     if bmi >= 25:
#         st.write(f"- Your BMI of **{bmi:.2f}** shows excess weight, which contributes to obesity risk.")
#     if inputs['Gender'] == "Male":
#         st.write("- As a male, you may store more visceral fat, which can raise health risks.")

#     # Lifestyle Info Analysis
#     st.markdown("#### üçΩÔ∏è Your Lifestyle Information")
#     if inputs['FAVC'] == "yes":
#         st.write("- You frequently consume high-calorie foods, which increases your chance of weight gain.")
#     if inputs['FCVC'] <= 1:
#         st.write("- You eat vegetables rarely or sometimes, which limits nutrient balance and can increase obesity risk.")
#     elif inputs['FCVC'] >= 2:
#         st.write("- You eat vegetables frequently, which helps lower obesity risk.")
#     if inputs['CAEC'] != "no":
#         st.write("- You often eat between meals, which raises your daily calorie intake.")
#     if inputs['SMOKE'] == "yes":
#         st.write("- You smoke, which affects metabolism and may influence your weight.")
#     if inputs['CH2O'] < 1.5:
#         st.write("- You drink less water than recommended, which might slow down your metabolism.")
#     if inputs['FAF'] < 2:
#         st.write("- You do little physical activity, which strongly contributes to weight gain.")
#     if inputs['TUE'] > 6:
#         st.write("- You spend many hours using electronic devices, showing a sedentary lifestyle.")
#     if inputs['CALC'] != "no":
#         st.write("- You drink alcohol, which adds extra calories to your diet.")
#     if inputs['MTRANS'] in ["Automobile", "Motorbike"]:
#         st.write("- You mainly use motorized transport, which reduces your daily physical activity.")

#     st.info("‚úÖ These factors together explain why the model classified you into this obesity category.")
#     return pred_class[0]

"""# Predict.py"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile predict.py
# import streamlit as st
# import plotly.graph_objects as go
# import numpy as np
# 
# obesity_map = {
#     0: "Insufficient_Weight",
#     1: "Normal_Weight",
#     2: "Overweight_Level_I",
#     3: "Overweight_Level_II",
#     4: "Obesity_Type_I",
#     5: "Obesity_Type_II"
# }
# 
# def run_prediction(inputs, model, scaler, target_le=None, username="User"):
#     """
#     Run prediction and display results + BMI gauge + personalized analysis.
# 
#     inputs: dict of user inputs (numerical + already encoded categorical)
#     model: trained ML model
#     scaler: fitted scaler for numerical features
#     target_le: LabelEncoder for target variable (optional)
#     username: optional name for personalized message
#     """
# 
#     # --- Prepare numerical features ---
#     numerical_features = np.array([[inputs['Age'], inputs['Height'], inputs['Weight']]])
#     numerical_scaled = scaler.transform(numerical_features)[0]
# 
#     # --- Prepare final feature vector ---
#     X = [
#         inputs['Gender'],
#         inputs['family_history_with_overweight'],
#         numerical_scaled[0],  # Age
#         numerical_scaled[1],  # Height
#         numerical_scaled[2],  # Weight
#         inputs['FCVC'],
#         inputs['NCP'],        # Number of main meals (slider)
#         inputs['CAEC']
#     ]
# 
#     # --- Predict using trained model ---
#     prediction = model.predict([X])[0]
# 
#     # --- Convert numeric prediction to human-readable class ---
#     pred_label = obesity_map.get(prediction, "Unknown")
# 
#     # --- Show prediction ---
#     st.success(f"‚úÖ Predicted obesity category: **{pred_label}**")
# 
#     # --- BMI calculation ---
#     bmi = inputs['Weight'] / (inputs['Height'] ** 2)
#     st.metric(label="Your BMI", value=f"{bmi:.2f}")
# 
#     if bmi < 18.5:
#         bmi_category = "Underweight"
#     elif 18.5 <= bmi < 24.9:
#         bmi_category = "Normal weight"
#     elif 25 <= bmi < 29.9:
#         bmi_category = "Overweight"
#     else:
#         bmi_category = "Obese"
# 
#     st.write(f"**BMI Category:** {bmi_category}")
# 
#     # --- BMI visualization ---
#     max_bmi = max(50, round(bmi + 5))
#     fig = go.Figure(go.Indicator(
#         mode="gauge+number",
#         value=bmi,
#         title={'text': "BMI Gauge"},
#         gauge={
#             'axis': {'range': [10, max_bmi]},
#             'steps': [
#                 {'range': [10, 18.5], 'color': "lightblue"},
#                 {'range': [18.5, 24.9], 'color': "lightgreen"},
#                 {'range': [25, 29.9], 'color': "orange"},
#                 {'range': [30, max_bmi], 'color': "red"}
#             ],
#             'threshold': {'line': {'color': "black", 'width': 4},
#                           'thickness': 0.75, 'value': bmi}
#         }
#     ))
#     st.plotly_chart(fig, use_container_width=True)
# 
#     # --- Personalized Analysis ---
#     st.markdown(f"### üë§ {username}, why are you classified as **{pred_label}**?")
# 
#     if inputs.get('family_history_with_overweight') == 1:
#         st.write("- You have a family history of overweight, which might increase your risk.")
#     if bmi >= 25:
#         st.write(f"- Your BMI of **{bmi:.2f}** shows excess weight, which contributes to obesity risk.")
#     if inputs.get('Gender') == 1:
#         st.write("- As a male, you may store more visceral fat, increasing health risks.")
#     if inputs.get('FCVC') == 1:
#         st.write("- Rare vegetable consumption may affect nutrient balance and weight control.")
#     if inputs.get('CAEC') != 0:
#         st.write("- Eating between meals raises your daily calorie intake.")
# 
#     st.info("‚úÖ These factors together explain why the model classified you into this obesity category.")
# 
#     return pred_label
#

# %%writefile predict.py
# import streamlit as st
# import plotly.graph_objects as go
# import numpy as np

# def run_prediction(inputs, model, scaler, le, username="User"):
#     """Run prediction and display results + BMI gauge + personalized analysis"""

#     # Encode features consistently with training
#     X = [
#         0 if inputs['Gender'] == "Female" else 1,
#         inputs['Age'],
#         inputs['Height'],
#         inputs['Weight'],
#         1 if inputs['family_history_with_overweight'] == "yes" else 0,
#         1 if inputs['FAVC'] == "yes" else 0,
#         inputs['FCVC'],
#         inputs['NCP'],
#         0 if inputs['CAEC'] == "no" else (1 if inputs['CAEC'] == "Sometimes" else 2),
#         0 if inputs['SMOKE'] == "no" else 1,
#         inputs['CH2O'],
#         0 if inputs['SCC'] == "no" else 1,
#         inputs['FAF'],
#         inputs['TUE'],
#         0 if inputs['CALC'] == "no" else (1 if inputs['CALC'] == "Sometimes" else 2),
#         0 if inputs['MTRANS'] == "Automobile" else (
#             1 if inputs['MTRANS'] == "Motorbike" else (
#             2 if inputs['MTRANS'] == "Bike" else (
#             3 if inputs['MTRANS'] == "Public_Transportation" else 4)))
#     ]

#     # Convert to 2D array for scaler and model
#     X_array = np.array(X).reshape(1, -1)

#     # Scale all features using loaded scaler
#     X_scaled = scaler.transform(X_array)

#     # Predict
#     prediction = model.predict(X_scaled)
#     pred_class = le.inverse_transform(prediction)

#     # Show prediction
#     st.success(f"‚úÖ Predicted obesity category: **{pred_class[0]}**")

#     # --- BMI calculation ---
#     bmi = inputs['Weight'] / (inputs['Height'] ** 2)
#     st.metric(label="Your BMI", value=f"{bmi:.2f}")

#     if bmi < 18.5:
#         bmi_category = "Underweight"
#     elif 18.5 <= bmi < 24.9:
#         bmi_category = "Normal weight"
#     elif 25 <= bmi < 29.9:
#         bmi_category = "Overweight"
#     else:
#         bmi_category = "Obese"

#     st.write(f"**BMI Category:** {bmi_category}")

#     # --- BMI visualization ---
#     max_bmi = max(40, round(bmi + 5))
#     fig = go.Figure(go.Indicator(
#         mode="gauge+number",
#         value=bmi,
#         title={'text': "BMI Gauge"},
#         gauge={
#             'axis': {'range': [10, max_bmi]},
#             'steps': [
#                 {'range': [10, 18.5], 'color': "lightblue"},
#                 {'range': [18.5, 24.9], 'color': "lightgreen"},
#                 {'range': [25, 29.9], 'color': "orange"},
#                 {'range': [30, max_bmi], 'color': "red"}],
#             'threshold': {
#                 'line': {'color': "black", 'width': 4},
#                 'thickness': 0.75,
#                 'value': bmi
#             }
#         }
#     ))
#     st.plotly_chart(fig, use_container_width=True)

#     # --- Personalized Analysis ---
#     st.markdown(f"### üë§ {username}, why are you classified as **{pred_class[0]}**?")

#     # Personal Info Analysis
#     st.markdown("#### üß¨ Your Personal Information")
#     if inputs['family_history_with_overweight'] == "yes":
#         st.write("- You have a family history of overweight, which might increase your risk of obesity.")
#     if inputs['Age'] > 40:
#         st.write("- You are over 40 years old, and slower metabolism at this age can make weight control harder.")
#     if bmi >= 25:
#         st.write(f"- Your BMI of **{bmi:.2f}** shows excess weight, which contributes to obesity risk.")
#     if inputs['Gender'] == "Male":
#         st.write("- As a male, you may store more visceral fat, which can raise health risks.")

#     # Lifestyle Info Analysis
#     st.markdown("#### üçΩÔ∏è Your Lifestyle Information")
#     if inputs['FAVC'] == "yes":
#         st.write("- You frequently consume high-calorie foods, which increases your chance of weight gain.")
#     if inputs['FCVC'] <= 1:
#         st.write("- You eat vegetables rarely or sometimes, which limits nutrient balance and can increase obesity risk.")
#     elif inputs['FCVC'] >= 2:
#         st.write("- You eat vegetables frequently, which helps lower obesity risk.")
#     if inputs['CAEC'] != "no":
#         st.write("- You often eat between meals, which raises your daily calorie intake.")
#     if inputs['SMOKE'] == "yes":
#         st.write("- You smoke, which affects metabolism and may influence your weight.")
#     if inputs['CH2O'] < 1.5:
#         st.write("- You drink less water than recommended, which might slow down your metabolism.")
#     if inputs['FAF'] < 2:
#         st.write("- You do little physical activity, which strongly contributes to weight gain.")
#     if inputs['TUE'] > 6:
#         st.write("- You spend many hours using electronic devices, showing a sedentary lifestyle.")
#     if inputs['CALC'] != "no":
#         st.write("- You drink alcohol, which adds extra calories to your diet.")
#     if inputs['MTRANS'] in ["Automobile", "Motorbike"]:
#         st.write("- You mainly use motorized transport, which reduces your daily physical activity.")

#     st.info("‚úÖ These factors together explain why the model classified you into this obesity category.")

"""# Exploration.py"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile exploration.py
# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# 
# # ===============================
# # Load Raw + Cleaned Dataset
# # ===============================
# @st.cache_data
# def load_data():
#     raw = pd.read_csv("ObesityDataSet_raw_and_data_sinthetic.csv")
#     cleaned = pd.read_csv("ObesityDataSet_with_BMIIII.csv")  # <-- ensure cleaned dataset exists
#     return raw, cleaned
# 
# 
# def show_exploration():
#     """Streamlit UI for dataset exploration"""
#     raw_df, clean_df = load_data()
# 
#     # ===============================
#     # Sidebar Controls
#     # ===============================
#     st.sidebar.title("üîç Data Exploration")
# 
#     explore_mode = st.sidebar.radio(
#         "Choose View:",
#         ["Overall Summary", "Single Feature"]
#     )
# 
#     dataset_choice = st.sidebar.radio(
#         "Choose Dataset:",
#         ["Before Cleaning", "After Cleaning"]
#     )
# 
#     if explore_mode == "Single Feature":
#         feature = st.sidebar.selectbox("Select Feature", raw_df.columns)
# 
#     # ===============================
#     # Show Data According to Choice
#     # ===============================
#     if explore_mode == "Overall Summary":
#         st.title("üìä Overall Dataset Summary")
# 
#         if dataset_choice == "Before Cleaning":
#             df = raw_df
#             st.subheader("Before Cleaning Dataset")
#         else:
#             df = clean_df
#             st.subheader("After Cleaning Dataset")
# 
#         st.write("### Preview")
#         st.dataframe(df.head())
# 
#         st.write("### Shape")
#         st.write(df.shape)
# 
#         st.write("### Data Types")
#         st.write(df.dtypes)
# 
#         st.write("### Summary Statistics")
#         st.write(df.describe(include="all"))
# 
#     elif explore_mode == "Single Feature":
#         st.title(f"üìå Feature Exploration: {feature}")
# 
#         if dataset_choice == "Before Cleaning":
#             df = raw_df
#             st.subheader(f"Before Cleaning: {feature}")
#         else:
#             df = clean_df
#             st.subheader(f"After Cleaning: {feature}")
# 
#         # ===============================
#         # Numeric vs Categorical Handling
#         # ===============================
#         if pd.api.types.is_numeric_dtype(df[feature]):
#             # Histogram + Boxplot
#             fig, ax = plt.subplots(1, 2, figsize=(12, 4))
#             sns.histplot(df[feature].dropna(), kde=True, ax=ax[0], color="skyblue")
#             ax[0].set_title("Distribution")
# 
#             sns.boxplot(x=df[feature], ax=ax[1], color="lightgreen")
#             ax[1].set_title("Boxplot")
# 
#             st.pyplot(fig)
# 
#             # Show basic stats
#             st.write("### Summary Statistics")
#             st.write(df[feature].describe())
# 
#         else:
#             # Countplot + Pie Chart
#             fig, ax = plt.subplots(1, 2, figsize=(12, 4))
#             sns.countplot(x=df[feature], ax=ax[0], palette="Set2")
#             ax[0].set_title("Countplot")
#             ax[0].tick_params(axis="x", rotation=45)
# 
#             df[feature].value_counts().plot.pie(
#                 autopct='%1.1f%%', ax=ax[1], colors=sns.color_palette("Set2")
#             )
#             ax[1].set_ylabel("")
#             ax[1].set_title("Percentage")
# 
#             st.pyplot(fig)
# 
#             # Show frequency table
#             st.write("### Frequency Table")
#             st.write(df[feature].value_counts())
#

# %%writefile app.py
# import streamlit as st
# import joblib
# import numpy as np
# import pandas as pd
# from sklearn.preprocessing import LabelEncoder
# import plotly.graph_objects as go
# from hero_section import show_hero
# from predict import run_prediction
# from exploration import show_exploration


# # Load model + scaler
# model = joblib.load("Lr_model.pkl")
# scaler = joblib.load("Lr_scaler.pkl")

# # Load dataset for category values
# df = pd.read_csv("ObesityDataSet_raw_and_data_sinthetic.csv")

# # Encode labels
# le = LabelEncoder()
# le.fit(df['NObeyesdad'])

# # --- PAGE CONFIG ---
# st.set_page_config(
#     page_title="Obesity Testing App",
#     page_icon="üè•",
#     layout="wide"
# )

# # --- SIDEBAR AUTHENTICATION ---
# st.sidebar.title("üîê Authentication")

# if "authenticated" not in st.session_state:
#     st.session_state["authenticated"] = False
# if "username" not in st.session_state:
#     st.session_state["username"] = ""

# if not st.session_state["authenticated"]:
#     username = st.sidebar.text_input("Username")
#     password = st.sidebar.text_input("Password", type="password")

#     if st.sidebar.button("Login"):
#         if username == "Wong" and password == "1234":
#             st.session_state["authenticated"] = True
#             st.session_state["username"] = username
#             st.sidebar.success("‚úÖ Login successful!")
#         else:
#             st.sidebar.error("‚ùå Invalid username or password")
# else:
#     st.sidebar.success(f"üëã Welcome, {st.session_state['username']}")
#     if st.sidebar.button("Logout"):
#         st.session_state["authenticated"] = False
#         st.session_state["username"] = ""
#         st.rerun()

# # Sidebar About Section
# st.sidebar.markdown("---")
# st.sidebar.title("‚ÑπÔ∏è About")
# st.sidebar.info("""
# This app is developed by **Noom Inc**.
# Login to test your obesity category with AI predictions.
# """)

# # --- Sidebar Data Exploration ---
# if st.sidebar.button("üìä Data Exploration"):
#     st.session_state["show_exploration"] = True
# else:
#     if "show_exploration" not in st.session_state:
#         st.session_state["show_exploration"] = False

# # --- HERO SECTION ---
# if st.session_state["authenticated"]:
#     show_hero(st.session_state["username"])   # personalized hero
# else:
#     show_hero()                               # default hero

# # --- MAIN CONTENT ---
# if st.session_state["authenticated"]:
#     if st.session_state.get("show_exploration", False):
#         show_exploration()
#     else:
#         st.subheader("Fill in your details to predict obesity category")
#         st.markdown("---")

#         inputs = {}

#         # --- Personal Info ---
#         with st.expander("Personal Information", expanded=True):
#             inputs['Gender'] = st.selectbox("Gender", df['Gender'].unique())
#             inputs['Age'] = st.slider("Age", min_value=1, max_value=100, step=1)
#             inputs['Height'] = st.slider("Height (m)", min_value=1.0, max_value=2.5, step=0.01)
#             inputs['Weight'] = st.slider("Weight (kg)", min_value=20.0, max_value=200.0, step=0.1)
#             inputs['family_history_with_overweight'] = st.selectbox(
#                 "Family History With Overweight", df['family_history_with_overweight'].unique()
#             )

#         # --- Lifestyle Info ---
#         with st.expander("Lifestyle Information", expanded=True):
#             inputs['FAVC'] = st.selectbox(
#                 "Frequent Consumption of High-Calorie Food (FAVC)",
#                 df['FAVC'].unique()
#             )

#             # FCVC mapping
#             fcvc_map = {
#                 "No / Rarely": 0,
#                 "Sometimes": 1,
#                 "Frequently": 2,
#                 "Always": 3
#             }
#             fcvc_choice = st.selectbox(
#                 "Frequency of Consumption of Vegetables (FCVC)",
#                 list(fcvc_map.keys())
#             )
#             inputs['FCVC'] = fcvc_map[fcvc_choice]

#             inputs['NCP'] = st.slider("Number of Main Meals (NCP)", min_value=1, max_value=5, step=1)
#             inputs['CAEC'] = st.selectbox("Consumption of Food Between Meals (CAEC)", df['CAEC'].unique())
#             inputs['SMOKE'] = st.selectbox("Smoking Habit", df['SMOKE'].unique())
#             inputs['CH2O'] = st.slider("Daily Water Consumption (liters, CH2O)", min_value=0.0, max_value=5.0, step=0.1)
#             inputs['SCC'] = st.selectbox("Calories Consumption Monitoring (SCC)", df['SCC'].unique())
#             inputs['FAF'] = st.slider("Physical Activity Frequency (hours per week, FAF)", min_value=0.0, max_value=10.0, step=0.5)
#             inputs['TUE'] = st.slider("Time Using Electronic Devices (hours per day, TUE)", min_value=0.0, max_value=24.0, step=0.5)
#             inputs['CALC'] = st.selectbox("Consumption of Alcohol (CALC)", df['CALC'].unique())
#             inputs['MTRANS'] = st.selectbox("Transportation Used", df['MTRANS'].unique())

#         # --- Predict ---
#         if st.button("Predict"):
#             run_prediction(inputs, model, scaler, le, username=st.session_state.get("username", "User"))
# else:
#     st.info("‚ÑπÔ∏è Please log in to use the app.")

# %%writefile app.py
# import streamlit as st
# import joblib
# import numpy as np
# import pandas as pd
# from sklearn.preprocessing import LabelEncoder
# from hero_section import show_hero
# from predict import run_prediction
# from exploration import show_exploration

# # --- Load model + scaler ---
# model = joblib.load("Lr_model.pkl")
# scaler = joblib.load("Lr_scaler.pkl")

# # Load dataset for category values
# df = pd.read_csv("ObesityDataSet_raw_and_data_sinthetic.csv")

# # Encode labels for target
# le = LabelEncoder()
# le.fit(df['NObeyesdad'])

# # --- PAGE CONFIG ---
# st.set_page_config(
#     page_title="Obesity Testing App",
#     page_icon="üè•",
#     layout="wide"
# )

# # --- SIDEBAR AUTHENTICATION ---
# st.sidebar.title("üîê Authentication")

# if "authenticated" not in st.session_state:
#     st.session_state["authenticated"] = False
# if "username" not in st.session_state:
#     st.session_state["username"] = ""
# if "show_exploration" not in st.session_state:
#     st.session_state["show_exploration"] = False

# if not st.session_state["authenticated"]:
#     username = st.sidebar.text_input("Username")
#     password = st.sidebar.text_input("Password", type="password")

#     if st.sidebar.button("Login"):
#         if username == "Wong" and password == "1234":
#             st.session_state["authenticated"] = True
#             st.session_state["username"] = username
#             st.sidebar.success("‚úÖ Login successful!")
#         else:
#             st.sidebar.error("‚ùå Invalid username or password")
# else:
#     st.sidebar.success(f"üëã Welcome, {st.session_state['username']}")
#     if st.sidebar.button("Logout"):
#         st.session_state["authenticated"] = False
#         st.session_state["username"] = ""
#         st.experimental_rerun()

# # --- Sidebar Navigation ---
# st.sidebar.markdown("---")
# st.sidebar.title("üìå Navigation")

# if st.sidebar.button("Obesity Prediction"):
#     st.session_state["show_exploration"] = False

# if st.sidebar.button("üìä Data Exploration"):
#     st.session_state["show_exploration"] = True

# # Sidebar About Section
# st.sidebar.markdown("---")
# st.sidebar.title("‚ÑπÔ∏è About")
# st.sidebar.info("""
# This app is developed by **Noom Inc**.
# Login to test your obesity category with AI predictions.
# """)

# # --- HERO SECTION ---
# if st.session_state["authenticated"]:
#     show_hero(st.session_state["username"])   # personalized hero
# else:
#     show_hero()                               # default hero

# # --- MAIN CONTENT ---
# if st.session_state["authenticated"]:
#     if st.session_state.get("show_exploration", False):
#         show_exploration()
#     else:
#         st.subheader("Fill in your details to predict obesity category")
#         st.markdown("---")
#         inputs = {}

#         # --- Personal Info ---
#         with st.expander("Personal Information", expanded=True):
#             inputs['Gender'] = st.selectbox("Gender", df['Gender'].unique())
#             inputs['Age'] = st.slider("Age", min_value=1, max_value=100, step=1)
#             inputs['Height'] = st.slider("Height (m)", min_value=1.0, max_value=2.5, step=0.01)
#             inputs['Weight'] = st.slider("Weight (kg)", min_value=20.0, max_value=200.0, step=0.1)
#             inputs['family_history_with_overweight'] = st.selectbox(
#                 "Family History With Overweight", df['family_history_with_overweight'].unique()
#             )

#         # --- Lifestyle Info ---
#         with st.expander("Lifestyle Information", expanded=True):
#             inputs['FAVC'] = st.selectbox("Frequent Consumption of High-Calorie Food (FAVC)", df['FAVC'].unique())
#             fcvc_map = {"No / Rarely": 0, "Sometimes": 1, "Frequently": 2, "Always": 3}
#             fcvc_choice = st.selectbox("Frequency of Consumption of Vegetables (FCVC)", list(fcvc_map.keys()))
#             inputs['FCVC'] = fcvc_map[fcvc_choice]
#             inputs['NCP'] = st.slider("Number of Main Meals (NCP)", min_value=1, max_value=5, step=1)
#             inputs['CAEC'] = st.selectbox("Consumption of Food Between Meals (CAEC)", df['CAEC'].unique())
#             inputs['SMOKE'] = st.selectbox("Smoking Habit", df['SMOKE'].unique())
#             inputs['CH2O'] = st.slider("Daily Water Consumption (liters, CH2O)", min_value=0.0, max_value=5.0, step=0.1)
#             inputs['SCC'] = st.selectbox("Calories Consumption Monitoring (SCC)", df['SCC'].unique())
#             inputs['FAF'] = st.slider("Physical Activity Frequency (hours per week, FAF)", min_value=0.0, max_value=10.0, step=0.5)
#             inputs['TUE'] = st.slider("Time Using Electronic Devices (hours per day, TUE)", min_value=0.0, max_value=24.0, step=0.5)
#             inputs['CALC'] = st.selectbox("Consumption of Alcohol (CALC)", df['CALC'].unique())
#             inputs['MTRANS'] = st.selectbox("Transportation Used", df['MTRANS'].unique())

#         # --- Predict ---
#         if st.button("Predict"):
#             run_prediction(inputs, model, scaler, le, username=st.session_state.get("username", "User"))
# else:
#     st.info("‚ÑπÔ∏è Please log in to use the app.")

"""# App.py"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import joblib
# import numpy as np
# import pandas as pd
# from hero_section import show_hero
# from predict import run_prediction
# 
# # --- Load model + scaler + categorical encoders + target encoder ---
# model = joblib.load("Lr_model.pkl")
# scaler = joblib.load("Lr_scaler.pkl")
# categorical_encoders = joblib.load("categorical_encoders.pkl")
# target_le = joblib.load("target_le.pkl")  # LabelEncoder for target variable
# 
# # Load dataset for reference (dropdowns, info)
# df = pd.read_csv("ObesityDataSet_raw_and_data_sinthetic.csv")
# 
# # --- PAGE CONFIG ---
# st.set_page_config(
#     page_title="Obesity Testing App",
#     page_icon="üè•",
#     layout="wide"
# )
# 
# # --- SIDEBAR AUTHENTICATION ---
# st.sidebar.title("üîê Authentication")
# if "authenticated" not in st.session_state:
#     st.session_state["authenticated"] = False
# if "username" not in st.session_state:
#     st.session_state["username"] = ""
# if "show_exploration" not in st.session_state:
#     st.session_state["show_exploration"] = False
# 
# if not st.session_state["authenticated"]:
#     username = st.sidebar.text_input("Username")
#     password = st.sidebar.text_input("Password", type="password")
#     if st.sidebar.button("Login"):
#         if username == "Wong" and password == "1234":
#             st.session_state["authenticated"] = True
#             st.session_state["username"] = username
#             st.sidebar.success("‚úÖ Login successful!")
#         else:
#             st.sidebar.error("‚ùå Invalid username or password")
# else:
#     st.sidebar.success(f"üëã Welcome, {st.session_state['username']}")
#     if st.sidebar.button("Logout"):
#         st.session_state["authenticated"] = False
#         st.session_state["username"] = ""
#         st.experimental_rerun()
# 
# # --- Sidebar Navigation ---
# st.sidebar.markdown("---")
# st.sidebar.title("üìå Navigation")
# if st.sidebar.button("Obesity Prediction"):
#     st.session_state["show_exploration"] = False
# if st.sidebar.button("üìä Data Exploration"):
#     st.session_state["show_exploration"] = True
# 
# # Sidebar About Section
# st.sidebar.markdown("---")
# st.sidebar.title("‚ÑπÔ∏è About")
# st.sidebar.info("""
# This app is developed by **Noom Inc**.
# Login to test your obesity category with AI predictions.
# """)
# 
# # --- HERO SECTION ---
# if st.session_state["authenticated"]:
#     show_hero(st.session_state["username"])
# else:
#     show_hero()
# 
# # --- MAIN CONTENT ---
# if st.session_state["authenticated"]:
#     if st.session_state.get("show_exploration", False):
#         from exploration import show_exploration
#         show_exploration()
#     else:
#         st.subheader("Fill in your details to predict obesity category")
#         st.markdown("---")
#         inputs = {}
# 
#         # --- Numerical Inputs ---
#         with st.expander("Personal Information", expanded=True):
#             inputs['Age'] = st.slider("Age", min_value=1, max_value=100, step=1)
#             inputs['Height'] = st.slider("Height (m)", min_value=1.0, max_value=2.5, step=0.01)
#             inputs['Weight'] = st.slider("Weight (kg)", min_value=20.0, max_value=200.0, step=0.1)
# 
#         # --- Categorical Inputs ---
#         with st.expander("Other Information", expanded=True):
#             # Gender mapping
#             gender_map = {"Male": 1, "Female": 0}
#             gender_choice = st.selectbox("Gender", list(gender_map.keys()))
#             inputs['Gender'] = gender_map[gender_choice]
# 
#             # Family history mapping
#             fam_map = {"Yes": 1, "No": 0}
#             fam_choice = st.selectbox("Family History of Overweight", list(fam_map.keys()))
#             inputs['family_history_with_overweight'] = fam_map[fam_choice]
# 
#             # FCVC mapping
#             fcvc_map = {1: "Rarely", 2: "Sometimes", 3: "Frequently"}
#             fcvc_choice = st.selectbox("Frequency of Vegetable Consumption (FCVC)", list(fcvc_map.values()))
#             inputs['FCVC'] = list(fcvc_map.keys())[list(fcvc_map.values()).index(fcvc_choice)]
# 
#             # NCP (Number of Main Meals) using slider
#             inputs['NCP'] = st.slider(
#                 "Number of Main Meals (NCP)",
#                 min_value=1,
#                 max_value=4,
#                 step=1,
#                 value=3
#             )
# 
#             # CAEC mapping (Eating Between Meals)
#             caec_map = {0: "No", 1: "Sometimes", 2: "Frequently", 3: "Always"}
#             caec_choice = st.selectbox("Eating Between Meals (CAEC)", list(caec_map.values()))
#             inputs['CAEC'] = list(caec_map.keys())[list(caec_map.values()).index(caec_choice)]
# 
#         # --- Predict Button ---
#         if st.button("Predict"):
#             run_prediction(
#                 inputs,
#                 model,
#                 scaler,
#                 target_le,  # Pass LabelEncoder for target
#                 username=st.session_state.get("username", "User")
#             )
# 
# else:
#     st.info("‚ÑπÔ∏è Please log in to use the app.")
#

# Ngrok + Streamlit
from pyngrok import ngrok
import subprocess

ngrok.set_auth_token("32ACSQ2ZjqSLC2miueJ2BzSJBkx_5ca4XXx6AGBiSVf8j2xKz")

# Set the Streamlit port
port = 8501

# Open a tunnel
public_url = ngrok.connect(port)
print("Streamlit app will be live at:", public_url)

# Run Streamlit in background
subprocess.Popen(["streamlit", "run", "app.py", "--server.port", str(port), "--server.address", "0.0.0.0"])

print("Scaler expects:", scaler.n_features_in_)
print(type(scaler))

import pandas as pd

# Load cleaned dataset
df = pd.read_csv("ObesityDataSet_with_BMIIII.csv")

# =======================
# 1. Check size
# =======================
print("Shape:", df.shape)   # number of rows, columns

# =======================
# 2. Check duplicates
# =======================
print("Duplicates:", df.duplicated().sum())

# =======================
# 3. Check missing values
# =======================
print("Missing values:\n", df.isnull().sum())

# =======================
# 4. Check categorical consistency
# =======================
for col in df.select_dtypes(include="object").columns:
    print(f"\nUnique values in {col}: {df[col].unique()}")

# =======================
# 5. Check outliers (example for Height, Weight, Age)
# =======================
print("\nHeight range:", df['Height'].min(), "to", df['Height'].max())
print("Weight range:", df['Weight'].min(), "to", df['Weight'].max())
print("Age range:", df['Age'].min(), "to", df['Age'].max())

df = df.drop_duplicates()
print("After removing duplicates:", df.shape)

df["BMI"] = df["Weight"] / (df["Height"] ** 2)
print(df["BMI"].describe())

# Optional: visualize
import matplotlib.pyplot as plt
df["BMI"].hist(bins=30)
plt.xlabel("BMI")
plt.ylabel("Count")
plt.title("BMI Distribution")
plt.show()

import joblib

# Load the encoder
target_le = joblib.load("target_le.pkl")

# Check the classes
print(target_le.classes_)
